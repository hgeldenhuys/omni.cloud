DROP SCHEMA IF EXISTS omnicloud CASCADE;
CREATE SCHEMA omnicloud;
GRANT ALL ON SCHEMA omnicloud TO public;

DROP SCHEMA IF EXISTS logs CASCADE;
CREATE SCHEMA logs;
GRANT ALL ON SCHEMA logs TO public;

CREATE SEQUENCE logs.audit_logs_id_seq START WITH 1;

CREATE SEQUENCE omnicloud.roles_id_seq START WITH 1;

CREATE SEQUENCE omnicloud.tenants_id_seq START WITH 1;

CREATE SEQUENCE omnicloud.user_tenant_permissions_id_seq START WITH 1;

CREATE SEQUENCE omnicloud.user_tenants_id_seq START WITH 1;

CREATE SEQUENCE omnicloud.users_id_seq START WITH 1;

CREATE TABLE logs.audit_logs (
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	operation_name       varchar(10)  NOT NULL ,
	operation_time       timestamptz DEFAULT now() NOT NULL ,
	"table_name"         varchar(60)  NOT NULL ,
	log_type             varchar(100) DEFAULT 'APPLICATION_LOGS'::character varying  ,
	entity_id            varchar   ,
	"userId"              varchar   ,
	"before"             jsonb   ,
	"after"              jsonb   ,
	CONSTRAINT pk_audit_logs_id PRIMARY KEY ( id )
 );

CREATE TABLE omnicloud.roles (
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	name                 varchar(100)  NOT NULL ,
	created_on           timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL ,
	modified_on          timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL ,
	deleted              bool DEFAULT false NOT NULL ,
	permissions          _text   ,
	role_key             integer  NOT NULL ,
	CONSTRAINT pk_roles_id PRIMARY KEY ( id )
 );

CREATE INDEX idx_roles_key ON omnicloud.roles ( role_key );

CREATE TABLE omnicloud.tenants (
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	name                 varchar(100)  NOT NULL ,
	"type"               varchar(50)  NOT NULL ,
	created_on           timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL ,
	modified_on          timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL ,
	created_by           integer   ,
	modified_by          integer   ,
	deleted              bool DEFAULT false NOT NULL ,
	address1             varchar(100)   ,
	address2             varchar(100)   ,
	address3             varchar(100)   ,
	address4             varchar(100)   ,
	city                 varchar(100)   ,
	"state"              varchar(100)   ,
	zip                  varchar(20)   ,
	country              varchar(50)   ,
	status               varchar(50) DEFAULT 'active'::character varying NOT NULL ,
	CONSTRAINT pk_tenantId PRIMARY KEY ( id )
 );

CREATE INDEX idx_tenants_created_by ON omnicloud.tenants ( created_by );

CREATE INDEX idx_tenants_modified_by ON omnicloud.tenants ( modified_by );

CREATE TABLE omnicloud.user_tenant_permissions (
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"user_tenantId"       integer  NOT NULL ,
	created_on           date DEFAULT CURRENT_DATE NOT NULL ,
	modified_on          date DEFAULT CURRENT_DATE NOT NULL ,
	created_by           integer   ,
	modified_by          integer   ,
	deleted              bool DEFAULT false NOT NULL ,
	permission           text  NOT NULL ,
	allowed              bool DEFAULT true NOT NULL ,
	CONSTRAINT pk_user_permissions_id PRIMARY KEY ( id )
 );

CREATE INDEX idx_user_tenant_permissions_created_by ON omnicloud.user_tenant_permissions ( created_by );

CREATE INDEX idx_user_tenant_permissions_modified_by ON omnicloud.user_tenant_permissions ( modified_by );

CREATE INDEX idx_user_tenant_permissions_user_tenantId ON omnicloud.user_tenant_permissions ( "user_tenantId" );

CREATE TABLE omnicloud.user_tenants (
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"userId"              integer  NOT NULL ,
	"tenantId"            integer  NOT NULL ,
	created_on           timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL ,
	modified_on          timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL ,
	deleted              bool DEFAULT false NOT NULL ,
	"roleId"              integer NOT NULL ,
	status               varchar(50) DEFAULT 'active'::character varying NOT NULL ,
	CONSTRAINT pk_user_tenantId PRIMARY KEY ( id )
 );

CREATE INDEX idx_user_tenant_tenantId ON omnicloud.user_tenants ( "tenantId" );

CREATE INDEX idx_user_tenant_userId ON omnicloud.user_tenants ( "userId" );

CREATE INDEX idx_user_tenants_roleId ON omnicloud.user_tenants ( "roleId" );

CREATE TABLE omnicloud.users (
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"firstName"           varchar(50)  NOT NULL ,
	"middleName"          varchar(50)   ,
	"lastName"            varchar(50)   ,
	username             varchar(150)  NOT NULL ,
	email                varchar(150)   ,
	phone                varchar(15)   ,
	password           varchar(60)  NOT NULL ,
	created_on           timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL ,
	modified_on          timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL ,
	created_by           integer   ,
	modified_by          integer   ,
	deleted              bool DEFAULT false NOT NULL ,
	"defaultTenant"       integer  NOT NULL ,
	"lastLogin"           timestamptz   ,
	CONSTRAINT pk_userId PRIMARY KEY ( id ),
	CONSTRAINT idx_username UNIQUE ( username )
 );

CREATE INDEX idx_user_created_by ON omnicloud.users ( created_by );

CREATE INDEX idx_user_modified_by ON omnicloud.users ( modified_by );

CREATE INDEX "idx_users_defaultTenant" ON omnicloud.users ( "defaultTenant" );

CREATE OR REPLACE FUNCTION logs.audit_trigger()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
  DECLARE
    userId VARCHAR;
    ENTITY_ID VARCHAR;
BEGIN
IF TG_OP = 'INSERT'
THEN
userId := to_json(NEW)->'created_by';
ENTITY_ID := to_json(NEW)->'id';
INSERT INTO logs.audit_logs (
  operation_name,
  table_name,
  log_type,
  entity_id,
  "userId",
  after
  )
VALUES (
  TG_OP,
  TG_TABLE_NAME,
  TG_ARGV[0],
  ENTITY_ID,
  userId,
  to_jsonb(NEW)
  );
RETURN NEW;
ELSIF TG_OP = 'UPDATE'
THEN
userId := to_json(NEW)->'modified_by';
ENTITY_ID := to_json(NEW)->'id';
-- IF NEW != OLD THEN
 INSERT INTO logs.audit_logs (
   operation_name,
   table_name,
   log_type,
   entity_id,
   "userId",
   before,
   after
   )
VALUES (
  TG_OP,
  TG_TABLE_NAME,
  TG_ARGV[0],
  ENTITY_ID,
  userId,
  to_jsonb(OLD),
  to_jsonb(NEW)
  );
-- END IF;
 RETURN NEW;
ELSIF TG_OP = 'DELETE'
THEN
userId := to_json(OLD)->'modified_by';
ENTITY_ID := to_json(OLD)->'id';
INSERT INTO logs.audit_logs (
  operation_name,
  table_name,
  log_type,
  entity_id,
  "userId",
  before)
VALUES (
  TG_OP,
  TG_TABLE_NAME,
  TG_ARGV[0],
  ENTITY_ID,
  userId,
  to_jsonb(OLD)
);
RETURN OLD;
END IF;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.moddatetime()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.modified_on = now();
    RETURN NEW;
END;
$function$
;

CREATE TRIGGER mdt_roles BEFORE UPDATE ON omnicloud.roles FOR EACH ROW EXECUTE PROCEDURE moddatetime();

CREATE TRIGGER mdt_tenants BEFORE UPDATE ON omnicloud.tenants FOR EACH ROW EXECUTE PROCEDURE moddatetime();

CREATE TRIGGER mdt_user_tenant_permissions BEFORE UPDATE ON omnicloud.user_tenant_permissions FOR EACH ROW EXECUTE PROCEDURE moddatetime();

CREATE TRIGGER mdt_user_tenants BEFORE UPDATE ON omnicloud.user_tenants FOR EACH ROW EXECUTE PROCEDURE moddatetime();

CREATE TRIGGER mdt_users BEFORE UPDATE ON omnicloud.users FOR EACH ROW EXECUTE PROCEDURE moddatetime();

CREATE TRIGGER tenants_audit_trigger AFTER INSERT OR DELETE OR UPDATE ON omnicloud.tenants FOR EACH ROW EXECUTE PROCEDURE logs.audit_trigger('USER_LOGS');

CREATE TRIGGER user_tenant_permissions_audit_trigger AFTER INSERT OR DELETE OR UPDATE ON omnicloud.user_tenant_permissions FOR EACH ROW EXECUTE PROCEDURE logs.audit_trigger('USER_LOGS');

CREATE TRIGGER users_audit_trigger AFTER INSERT OR DELETE OR UPDATE ON omnicloud.users FOR EACH ROW EXECUTE PROCEDURE logs.audit_trigger('USER_LOGS');

ALTER TABLE omnicloud.tenants ADD CONSTRAINT fk_created_by FOREIGN KEY ( created_by ) REFERENCES omnicloud.user_tenants( id );

ALTER TABLE omnicloud.tenants ADD CONSTRAINT fk_modified_by FOREIGN KEY ( modified_by ) REFERENCES omnicloud.user_tenants( id );

ALTER TABLE omnicloud.user_tenant_permissions ADD CONSTRAINT fk_created_by FOREIGN KEY ( created_by ) REFERENCES omnicloud.user_tenants( id );

ALTER TABLE omnicloud.user_tenant_permissions ADD CONSTRAINT fk_modified_by FOREIGN KEY ( modified_by ) REFERENCES omnicloud.user_tenants( id );

ALTER TABLE omnicloud.user_tenant_permissions ADD CONSTRAINT fk_user_tenant_permissions FOREIGN KEY ( "user_tenantId" ) REFERENCES omnicloud.user_tenants( id );

ALTER TABLE omnicloud.user_tenants ADD CONSTRAINT fk_user_tenants_roles FOREIGN KEY ( "roleId" ) REFERENCES omnicloud.roles( id );

ALTER TABLE omnicloud.user_tenants ADD CONSTRAINT fk_user_tenant_tenant FOREIGN KEY ( "tenantId" ) REFERENCES omnicloud.tenants( id );

ALTER TABLE omnicloud.user_tenants ADD CONSTRAINT fk_user_tenant_user FOREIGN KEY ( "userId" ) REFERENCES omnicloud.users( id );

ALTER TABLE omnicloud.users ADD CONSTRAINT "fk_users_tenants_defaultTenant" FOREIGN KEY ( "defaultTenant" ) REFERENCES omnicloud.tenants( id );

ALTER TABLE omnicloud.users ADD CONSTRAINT fk_user_user_tenant_created_by FOREIGN KEY ( created_by ) REFERENCES omnicloud.user_tenants( id );

ALTER TABLE omnicloud.users ADD CONSTRAINT fk_user_user_tenant_modified_by FOREIGN KEY ( modified_by ) REFERENCES omnicloud.user_tenants( id );
